import React, { useState } from 'react';
import {
  Typography,
  Card,
  Form,
  Input,
  Button,
  Row,
  Col,
  Radio,
  Space,
  message,
  Result,
  Timeline,
  Steps,
  Progress,
  Divider,
  Alert
} from 'antd';
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  HomeOutlined,
  CreditCardOutlined,
  CheckCircleOutlined,
  ArrowLeftOutlined,
  ShoppingCartOutlined
} from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../context/CartContext';
import { orderService } from '../services/orderService';

const { Title, Text } = Typography;

export default function Checkout() {
  const [form] = Form.useForm();
  const navigate = useNavigate();
  const { cartItems, getTotalPrice, getTotalItems, clearCart } = useCart();
  
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [orderComplete, setOrderComplete] = useState(false);
  const [orderInfo, setOrderInfo] = useState(null);
  const [processingPayment, setProcessingPayment] = useState(false);
  const [paymentMessage, setPaymentMessage] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('banking');

  // ‚úÖ SAFE: Calculate values with fallbacks
  const totalPrice = getTotalPrice ? getTotalPrice() : 0;
  const totalItems = getTotalItems ? getTotalItems() : 0;
  const discount = totalPrice > 1000000 ? totalPrice * 0.1 : 0;
  const finalPrice = totalPrice - discount;

  console.log('üí≥ Checkout page render:', {
    cartItems: cartItems?.length || 0,
    totalPrice,
    totalItems,
    currentStep,
    orderComplete
  });

  // Check if cart is empty
  if (!cartItems || cartItems.length === 0) {
    return (
      <div style={{ textAlign: 'center', padding: '60px 20px' }}>
        <Result
          icon={<ShoppingCartOutlined style={{ color: '#faad14' }} />}
          title="Gi·ªè h√†ng tr·ªëng"
          subTitle="B·∫°n c·∫ßn th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n"
          extra={
            <Button type="primary" onClick={() => navigate('/')}>
              V·ªÅ trang ch·ªß
            </Button>
          }
        />
      </div>
    );
  }

  // üÜï TH√äM PAYMENT METHODS DATA
  const paymentMethods = [
    {
      key: 'momo',
      title: 'üì± V√≠ MoMo',
      description: 'Thanh to√°n nhanh ch√≥ng qua v√≠ MoMo',
      icon: 'üì±',
      popular: true,
      color: '#d82c8b'
    },
    {
      key: 'zalopay', 
      title: 'üí≥ ZaloPay',
      description: 'Thanh to√°n an to√†n v·ªõi ZaloPay',
      icon: 'üí≥',
      popular: false,
      color: '#0068ff'
    },
    {
      key: 'banking',
      title: 'üè¶ Chuy·ªÉn kho·∫£n',
      description: 'Chuy·ªÉn kho·∫£n qua ng√¢n h√†ng',
      icon: 'üè¶',
      popular: false,
      color: '#52c41a'
    },
    {
      key: 'vnpay',
      title: 'üèß VNPay',
      description: 'C·ªïng thanh to√°n VNPay',
      icon: 'üèß',
      popular: false,
      color: '#1890ff'
    }
  ];

  const steps = [
    {
      title: 'Th√¥ng tin',
      icon: <UserOutlined />
    },
    {
      title: 'Thanh to√°n',
      icon: <CreditCardOutlined />
    },
    {
      title: 'Ho√†n th√†nh',
      icon: <CheckCircleOutlined />
    }
  ];

  // üÜï PAYMENT PROCESSING STEPS
  const paymentSteps = [
    { title: 'X√°c th·ª±c th√¥ng tin', description: 'Ki·ªÉm tra d·ªØ li·ªáu ƒë∆°n h√†ng' },
    { title: 'K·∫øt n·ªëi thanh to√°n', description: 'Li√™n k·∫øt v·ªõi c·ªïng thanh to√°n' },
    { title: 'X·ª≠ l√Ω giao d·ªãch', description: 'Th·ª±c hi·ªán thanh to√°n' },
    { title: 'Ho√†n t·∫•t', description: 'Thanh to√°n th√†nh c√¥ng' }
  ];

  // üÜï ENHANCED PAYMENT PROCESSING FUNCTION
  const processPayment = async () => {
    setProcessingPayment(true);
    setCurrentStep(0);
    
    try {
      const messages = [
        'ƒêang x√°c th·ª±c th√¥ng tin kh√°ch h√†ng...',
        'K·∫øt n·ªëi v·ªõi c·ªïng thanh to√°n...',
        'ƒêang x·ª≠ l√Ω giao d·ªãch...',
        'Ho√†n t·∫•t thanh to√°n...'
      ];
      
      for (let i = 0; i < messages.length; i++) {
        setPaymentMessage(messages[i]);
        setCurrentStep(i);
        await new Promise(resolve => setTimeout(resolve, 1200));
      }
      
      // Success simulation
      const orderId = 'EDU' + Date.now();
      const paymentId = 'PAY' + Date.now();
      
      setOrderInfo({
        orderId,
        paymentId,
        method: paymentMethod,
        amount: finalPrice,
        transactionTime: new Date().toLocaleString('vi-VN'),
        items: cartItems.length
      });
      
      setOrderComplete(true);
      clearCart();
      message.success('üéâ Thanh to√°n th√†nh c√¥ng!');
      
    } catch (error) {
      message.error('‚ùå Thanh to√°n th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setProcessingPayment(false);
      setCurrentStep(0);
    }
  };

  // üÜï GET PAYMENT METHOD INFO
  const getPaymentMethodInfo = (key) => {
    return paymentMethods.find(method => method.key === key);
  };

  const handleFormSubmit = async (values) => {
    try {
      setLoading(true);
      console.log('üìù Form submitted:', values);

      // Create order
      const orderData = {
        customerInfo: values,
        items: cartItems,
        totalPrice: finalPrice,
        discount,
        paymentMethod: values.paymentMethod
      };

      console.log('üõí Creating order:', orderData);
      
      // Simulate API call
      const response = await orderService.createOrder(orderData);
      
      if (response.success) {
        setOrderInfo(response.data);
        setOrderComplete(true);
        
        // Clear cart after successful order
        if (clearCart) {
          clearCart();
        }
        
        message.success('üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!');
        setCurrentStep(2);
      } else {
        throw new Error(response.message || 'ƒê·∫∑t h√†ng th·∫•t b·∫°i');
      }
    } catch (error) {
      console.error('‚ùå Checkout Error:', error);
      message.error('‚ùå C√≥ l·ªói x·∫£y ra: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const nextStep = () => {
    if (currentStep === 0) {
      form.validateFields().then(() => {
        setCurrentStep(1);
      }).catch(() => {
        message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
      });
    }
  };

  const prevStep = () => {
    setCurrentStep(currentStep - 1);
  };

  if (orderComplete) {
    return (
      <div>
        <Steps current={currentStep} items={steps} style={{ marginBottom: 32 }} />
        
        <Result
          status="success"
          title="üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!"
          subTitle={
            <Space direction="vertical" size="middle">
              <Text>M√£ ƒë∆°n h√†ng: <Text strong>{orderInfo?.orderId}</Text></Text>
              <Text>M√£ giao d·ªãch: <Text strong>{orderInfo?.paymentId}</Text></Text>
              <Text>Ph∆∞∆°ng th·ª©c: <Text strong style={{ color: getPaymentMethodInfo(orderInfo?.method)?.color }}>
                {getPaymentMethodInfo(orderInfo?.method)?.title}
              </Text></Text>
              <Text>Th·ªùi gian: <Text strong>{orderInfo?.transactionTime}</Text></Text>
            </Space>
          }
          extra={[
            <Button type="primary" size="large" onClick={() => navigate('/courses')}>
              üéì B·∫Øt ƒë·∫ßu h·ªçc ngay
            </Button>,
            <Button size="large" onClick={() => navigate('/')}>
              üè† V·ªÅ trang ch·ªß  
            </Button>
          ]}
        >
          <Card style={{ marginTop: 24, textAlign: 'left' }}>
            <Timeline>
              <Timeline.Item color="green">
                <Text strong>‚úÖ Thanh to√°n ho√†n t·∫•t</Text>
                <br />
                <Text type="secondary">{orderInfo?.transactionTime}</Text>
              </Timeline.Item>
              <Timeline.Item color="blue">
                <Text strong>üìß Email x√°c nh·∫≠n ƒë√£ g·ª≠i</Text>
                <br />
                <Text type="secondary">Ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n</Text>
              </Timeline.Item>
              <Timeline.Item color="orange">
                <Text strong>üéì Truy c·∫≠p kh√≥a h·ªçc</Text>
                <br />
                <Text type="secondary">C√≥ th·ªÉ h·ªçc ngay l·∫≠p t·ª©c</Text>
              </Timeline.Item>
              <Timeline.Item>
                <Text strong>üì± T·∫£i ·ª©ng d·ª•ng mobile</Text>
                <br />
                <Text type="secondary">H·ªçc m·ªçi l√∫c m·ªçi n∆°i</Text>
              </Timeline.Item>
            </Timeline>
          </Card>
        </Result>
      </div>
    );
  }

  return (
    <div>
      {/* Header */}
      <div style={{ marginBottom: 24, display: 'flex', alignItems: 'center', gap: 16 }}>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/cart')}
        >
          Quay l·∫°i
        </Button>
        <div>
          <Title level={2} style={{ margin: 0 }}>
            üí≥ Thanh To√°n
          </Title>
          <Text type="secondary">
            Ho√†n t·∫•t th√¥ng tin ƒë·ªÉ thanh to√°n {totalItems} kh√≥a h·ªçc
          </Text>
        </div>
      </div>

      {/* Steps */}
      <Steps current={currentStep} items={steps} style={{ marginBottom: 32 }} />

      <Row gutter={[24, 24]}>
        {/* Form */}
        <Col xs={24} lg={16}>
          <Card>
            <Form
              form={form}
              layout="vertical"
              onFinish={handleFormSubmit}
              initialValues={{
                paymentMethod: 'banking'
              }}
            >
              {currentStep === 0 && (
                <>
                  <Title level={4}>üë§ Th√¥ng tin kh√°ch h√†ng</Title>
                  
                  <Row gutter={16}>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="fullName"
                        label="H·ªç v√† t√™n"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n' }]}
                      >
                        <Input 
                          prefix={<UserOutlined />} 
                          placeholder="Nguy·ªÖn VƒÉn A"
                          size="large"
                        />
                      </Form.Item>
                    </Col>
                    
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="email"
                        label="Email"
                        rules={[
                          { required: true, message: 'Vui l√≤ng nh·∫≠p email' },
                          { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' }
                        ]}
                      >
                        <Input 
                          prefix={<MailOutlined />} 
                          placeholder="example@email.com"
                          size="large"
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Row gutter={16}>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="phone"
                        label="S·ªë ƒëi·ªán tho·∫°i"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' }]}
                      >
                        <Input 
                          prefix={<PhoneOutlined />} 
                          placeholder="0901234567"
                          size="large"
                        />
                      </Form.Item>
                    </Col>
                    
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="address"
                        label="ƒê·ªãa ch·ªâ"
                      >
                        <Input 
                          prefix={<HomeOutlined />} 
                          placeholder="ƒê·ªãa ch·ªâ c·ªßa b·∫°n"
                          size="large"
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <div style={{ textAlign: 'right', marginTop: 24 }}>
                    <Button type="primary" size="large" onClick={nextStep}>
                      Ti·∫øp t·ª•c
                    </Button>
                  </div>
                </>
              )}

              {currentStep === 1 && (
                <>
                  {/* üÜï ENHANCED PAYMENT METHODS SECTION */}
                  <Card title="üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n" style={{ marginBottom: '24px' }}>
                    <Radio.Group 
                      value={paymentMethod} 
                      onChange={(e) => setPaymentMethod(e.target.value)}
                      style={{ width: '100%' }}
                    >
                      <Space direction="vertical" size="middle" style={{ width: '100%' }}>
                        {paymentMethods.map(method => (
                          <Card
                            key={method.key}
                            size="small"
                            style={{
                              border: paymentMethod === method.key ? `2px solid ${method.color}` : '1px solid #d9d9d9',
                              borderRadius: '8px',
                              cursor: 'pointer',
                              transition: 'all 0.3s ease',
                              background: paymentMethod === method.key ? `${method.color}10` : 'white'
                            }}
                            onClick={() => setPaymentMethod(method.key)}
                            hoverable
                          >
                            <Radio value={method.key} style={{ width: '100%' }}>
                              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                                <Space>
                                  <span style={{ fontSize: '24px' }}>{method.icon}</span>
                                  <div>
                                    <Text strong style={{ color: method.color }}>{method.title}</Text>
                                    {method.popular && (
                                      <span style={{
                                        marginLeft: '8px',
                                        background: '#ff4d4f',
                                        color: 'white',
                                        padding: '2px 6px',
                                        borderRadius: '10px',
                                        fontSize: '10px'
                                      }}>
                                        PH·ªî BI·∫æN
                                      </span>
                                    )}
                                    <br />
                                    <Text type="secondary" style={{ fontSize: '12px' }}>
                                      {method.description}
                                    </Text>
                                  </div>
                                </Space>
                              </div>
                            </Radio>
                          </Card>
                        ))}
                      </Space>
                    </Radio.Group>
                  </Card>

                  <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 24 }}>
                    <Button size="large" onClick={prevStep}>
                      Quay l·∫°i
                    </Button>
                    <Button 
                      type="primary" 
                      size="large" 
                      onClick={processPayment}
                      loading={processingPayment}
                      style={{
                        // üîß FIX: Responsive width
                        width: window.innerWidth <= 768 ? 'calc(100% - 80px)' : 'auto', // Mobile: tr·ª´ width c·ªßa n√∫t "Quay l·∫°i"
                        minWidth: '150px', // Desktop: minimum width
                        height: '50px',
                        fontSize: '16px',
                        fontWeight: 'bold',
                        background: getPaymentMethodInfo(paymentMethod)?.color || '#1890ff',
                        borderColor: getPaymentMethodInfo(paymentMethod)?.color || '#1890ff',
                        borderRadius: '8px',
                        marginLeft: '12px' // üÜï Spacing t·ª´ n√∫t "Quay l·∫°i"
                      }}
                      disabled={!paymentMethod || cartItems.length === 0}
                    >
                      {processingPayment ? (
                        'ƒêang x·ª≠ l√Ω...'
                      ) : (
                        // üîß FIX: Responsive text
                        window.innerWidth <= 768 
                          ? `${finalPrice?.toLocaleString()}‚Ç´` // Mobile: ch·ªâ hi·ªán s·ªë ti·ªÅn
                          : `Thanh to√°n ${finalPrice?.toLocaleString()}‚Ç´` // Desktop: full text
                      )}
                    </Button>
                  </div>
                </>
              )}
            </Form>
          </Card>
        </Col>

        {/* Order Summary */}
        <Col xs={24} lg={8}>
          <Card title="üìã T√≥m t·∫Øt ƒë∆°n h√†ng" style={{ position: 'sticky', top: 100 }}>
            <Space direction="vertical" size="middle" style={{ width: '100%' }}>
              {/* Items */}
              <div>
                <Text strong style={{ marginBottom: 12, display: 'block' }}>
                  Kh√≥a h·ªçc ({cartItems.length})
                </Text>
                {cartItems.slice(0, 3).map(item => (
                  <div key={item.id} style={{ marginBottom: 8 }}>
                    <Text ellipsis style={{ fontSize: 12 }}>
                      ‚Ä¢ {item.name}
                    </Text>
                    <div style={{ textAlign: 'right' }}>
                      <Text style={{ fontSize: 12 }}>
                        {new Intl.NumberFormat('vi-VN').format(item.price)}‚Ç´
                      </Text>
                    </div>
                  </div>
                ))}
                {cartItems.length > 3 && (
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    ... v√† {cartItems.length - 3} kh√≥a h·ªçc kh√°c
                  </Text>
                )}
              </div>

              <Divider style={{ margin: '12px 0' }} />

              {/* Price calculation */}
              <div>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
                  <Text>T·∫°m t√≠nh:</Text>
                  <Text>{new Intl.NumberFormat('vi-VN').format(totalPrice)}‚Ç´</Text>
                </div>
                
                {discount > 0 && (
                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
                    <Text type="success">Gi·∫£m gi√°:</Text>
                    <Text type="success">-{new Intl.NumberFormat('vi-VN').format(discount)}‚Ç´</Text>
                  </div>
                )}
              </div>

              <Divider style={{ margin: '12px 0' }} />

              <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                <Title level={4} style={{ margin: 0 }}>T·ªïng c·ªông:</Title>
                <Title level={4} style={{ margin: 0, color: '#ff4d4f' }}>
                  {new Intl.NumberFormat('vi-VN').format(finalPrice)}‚Ç´
                </Title>
              </div>

              {discount > 0 && (
                <Alert
                  message="üéâ Gi·∫£m gi√° 10%"
                  type="success"
                  showIcon
                  style={{ marginTop: 16 }}
                />
              )}
            </Space>
          </Card>
        </Col>
      </Row>

      {/* üÜï TH√äM PROCESSING MODAL (th√™m sau n√∫t thanh to√°n) */}
      {processingPayment && (
        <Card
          style={{
            position: 'fixed',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            zIndex: 1000,
            width: '400px',
            textAlign: 'center',
            boxShadow: '0 10px 30px rgba(0,0,0,0.3)'
          }}
        >
          <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <div style={{ fontSize: '48px' }}>
              {getPaymentMethodInfo(paymentMethod)?.icon}
            </div>
            
            <Title level={4}>ƒêang x·ª≠ l√Ω thanh to√°n</Title>
            
            <Steps
              current={currentStep}
              direction="vertical"
              size="small"
              items={paymentSteps}
            />
            
            <Progress 
              percent={(currentStep + 1) * 25} 
              strokeColor={getPaymentMethodInfo(paymentMethod)?.color}
              showInfo={false}
            />
            
            <Text type="secondary">{paymentMessage}</Text>
          </Space>
        </Card>
      )}
    </div>
  );
}